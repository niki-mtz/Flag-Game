//
//  ContentView.swift
//  FlagApp
//
//  Created by Nicole Martinez on 10/20/23.
//
//
//
//


import SwiftUI

struct ContentView: View {
    
    let flags: [String: String] = [
        
        "AD": "ðŸ‡¦ðŸ‡©", "AE": "ðŸ‡¦ðŸ‡ª", "AF": "ðŸ‡¦ðŸ‡«", "AG": "ðŸ‡¦ðŸ‡¬", "AI": "ðŸ‡¦ðŸ‡®", "AL": "ðŸ‡¦ðŸ‡±", "AM": "ðŸ‡¦ðŸ‡²", "AO": "ðŸ‡¦ðŸ‡´", "AQ": "ðŸ‡¦ðŸ‡¶", "AR": "ðŸ‡¦ðŸ‡·", "AS": "ðŸ‡¦ðŸ‡¸", "AT": "ðŸ‡¦ðŸ‡¹", "AU": "ðŸ‡¦ðŸ‡º", "AW": "ðŸ‡¦ðŸ‡¼", "AX": "ðŸ‡¦ðŸ‡½", "AZ": "ðŸ‡¦ðŸ‡¿", "BA": "ðŸ‡§ðŸ‡¦", "BB": "ðŸ‡§ðŸ‡§", "BD": "ðŸ‡§ðŸ‡©", "BE": "ðŸ‡§ðŸ‡ª", "BF": "ðŸ‡§ðŸ‡«", "BG": "ðŸ‡§ðŸ‡¬", "BH": "ðŸ‡§ðŸ‡­", "BI": "ðŸ‡§ðŸ‡®", "BJ": "ðŸ‡§ðŸ‡¯", "BL": "ðŸ‡§ðŸ‡±", "BM": "ðŸ‡§ðŸ‡²", "BN": "ðŸ‡§ðŸ‡³", "BO": "ðŸ‡§ðŸ‡´", "BQ": "ðŸ‡§ðŸ‡¶", "BR": "ðŸ‡§ðŸ‡·", "BS": "ðŸ‡§ðŸ‡¸", "BT": "ðŸ‡§ðŸ‡¹", "BV": "ðŸ‡§ðŸ‡»", "BW": "ðŸ‡§ðŸ‡¼", "BY": "ðŸ‡§ðŸ‡¾", "BZ": "ðŸ‡§ðŸ‡¿", "CA": "ðŸ‡¨ðŸ‡¦", "CC": "ðŸ‡¨ðŸ‡¨", "CD": "ðŸ‡¨ðŸ‡©", "CF": "ðŸ‡¨ðŸ‡«", "CG": "ðŸ‡¨ðŸ‡¬", "CH": "ðŸ‡¨ðŸ‡­", "CI": "ðŸ‡¨ðŸ‡®", "CK": "ðŸ‡¨ðŸ‡°", "CL": "ðŸ‡¨ðŸ‡±", "CM": "ðŸ‡¨ðŸ‡²", "CN": "ðŸ‡¨ðŸ‡³", "CO": "ðŸ‡¨ðŸ‡´", "CR": "ðŸ‡¨ðŸ‡·", "CU": "ðŸ‡¨ðŸ‡º", "CV": "ðŸ‡¨ðŸ‡»", "CW": "ðŸ‡¨ðŸ‡¼", "CX": "ðŸ‡¨ðŸ‡½", "CY": "ðŸ‡¨ðŸ‡¾", "CZ": "ðŸ‡¨ðŸ‡¿", "DE": "ðŸ‡©ðŸ‡ª", "DJ": "ðŸ‡©ðŸ‡¯", "DK": "ðŸ‡©ðŸ‡°", "DM": "ðŸ‡©ðŸ‡²", "DO": "ðŸ‡©ðŸ‡´", "DZ": "ðŸ‡©ðŸ‡¿", "EC": "ðŸ‡ªðŸ‡¨", "EE": "ðŸ‡ªðŸ‡ª", "EG": "ðŸ‡ªðŸ‡¬", "EH": "ðŸ‡ªðŸ‡­", "ER": "ðŸ‡ªðŸ‡·", "ES": "ðŸ‡ªðŸ‡¸", "ET": "ðŸ‡ªðŸ‡¹", "FI": "ðŸ‡«ðŸ‡®", "FJ": "ðŸ‡«ðŸ‡¯", "FK": "ðŸ‡«ðŸ‡°", "FM": "ðŸ‡«ðŸ‡²", "FO": "ðŸ‡«ðŸ‡´", "FR": "ðŸ‡«ðŸ‡·", "GA": "ðŸ‡¬ðŸ‡¦", "GB": "ðŸ‡¬ðŸ‡§", "GD": "ðŸ‡¬ðŸ‡©", "GE": "ðŸ‡¬ðŸ‡ª", "GF": "ðŸ‡¬ðŸ‡«", "GG": "ðŸ‡¬ðŸ‡¬", "GH": "ðŸ‡¬ðŸ‡­", "GI": "ðŸ‡¬ðŸ‡®", "GL": "ðŸ‡¬ðŸ‡±", "GM": "ðŸ‡¬ðŸ‡²", "GN": "ðŸ‡¬ðŸ‡³", "GP": "ðŸ‡¬ðŸ‡µ", "GQ": "ðŸ‡¬ðŸ‡¶", "GR": "ðŸ‡¬ðŸ‡·", "GS": "ðŸ‡¬ðŸ‡¸", "GT": "ðŸ‡¬ðŸ‡¹", "GU": "ðŸ‡¬ðŸ‡º", "GW": "ðŸ‡¬ðŸ‡¼", "GY": "ðŸ‡¬ðŸ‡¾", "HK": "ðŸ‡­ðŸ‡°", "HM": "ðŸ‡­ðŸ‡²", "HN": "ðŸ‡­ðŸ‡³", "HR": "ðŸ‡­ðŸ‡·", "HT": "ðŸ‡­ðŸ‡¹", "HU": "ðŸ‡­ðŸ‡º", "ID": "ðŸ‡®ðŸ‡©", "IE": "ðŸ‡®ðŸ‡ª", "IL": "ðŸ‡®ðŸ‡±", "IM": "ðŸ‡®ðŸ‡²", "IN": "ðŸ‡®ðŸ‡³", "IO": "ðŸ‡®ðŸ‡´", "IQ": "ðŸ‡®ðŸ‡¶", "IR": "ðŸ‡®ðŸ‡·", "IS": "ðŸ‡®ðŸ‡¸", "IT": "ðŸ‡®ðŸ‡¹", "JE": "ðŸ‡¯ðŸ‡ª", "JM": "ðŸ‡¯ðŸ‡²", "JO": "ðŸ‡¯ðŸ‡´", "JP": "ðŸ‡¯ðŸ‡µ", "KE": "ðŸ‡°ðŸ‡ª", "KG": "ðŸ‡°ðŸ‡¬", "KH": "ðŸ‡°ðŸ‡­", "KI": "ðŸ‡°ðŸ‡®", "KM": "ðŸ‡°ðŸ‡²", "KN": "ðŸ‡°ðŸ‡³", "KP": "ðŸ‡°ðŸ‡µ", "KR": "ðŸ‡°ðŸ‡·", "KW": "ðŸ‡°ðŸ‡¼", "KY": "ðŸ‡°ðŸ‡¾", "KZ": "ðŸ‡°ðŸ‡¿", "LA": "ðŸ‡±ðŸ‡¦", "LB": "ðŸ‡±ðŸ‡§", "LC": "ðŸ‡±ðŸ‡¨", "LI": "ðŸ‡±ðŸ‡®", "LK": "ðŸ‡±ðŸ‡°", "LR": "ðŸ‡±ðŸ‡·", "LS": "ðŸ‡±ðŸ‡¸", "LT": "ðŸ‡±ðŸ‡¹", "LU": "ðŸ‡±ðŸ‡º", "LV": "ðŸ‡±ðŸ‡»", "LY": "ðŸ‡±ðŸ‡¾", "MA": "ðŸ‡²ðŸ‡¦", "MC": "ðŸ‡²ðŸ‡¨", "MD": "ðŸ‡²ðŸ‡©", "ME": "ðŸ‡²ðŸ‡ª", "MF": "ðŸ‡²ðŸ‡«", "MG": "ðŸ‡²ðŸ‡¬", "MH": "ðŸ‡²ðŸ‡­", "MK": "ðŸ‡²ðŸ‡°", "ML": "ðŸ‡²ðŸ‡±", "MM": "ðŸ‡²ðŸ‡²", "MN": "ðŸ‡²ðŸ‡³", "MO": "ðŸ‡²ðŸ‡´", "MP": "ðŸ‡²ðŸ‡µ", "MQ": "ðŸ‡²ðŸ‡¶", "MR": "ðŸ‡²ðŸ‡·", "MS": "ðŸ‡²ðŸ‡¸", "MT": "ðŸ‡²ðŸ‡¹", "MU": "ðŸ‡²ðŸ‡º", "MV": "ðŸ‡²ðŸ‡»", "MW": "ðŸ‡²ðŸ‡¼", "MX": "ðŸ‡²ðŸ‡½", "MY": "ðŸ‡²ðŸ‡¾", "MZ": "ðŸ‡²ðŸ‡¿", "NA": "ðŸ‡³ðŸ‡¦", "NC": "ðŸ‡³ðŸ‡¨", "NE": "ðŸ‡³ðŸ‡ª", "NF": "ðŸ‡³ðŸ‡«", "NG": "ðŸ‡³ðŸ‡¬", "NI": "ðŸ‡³ðŸ‡®", "NL": "ðŸ‡³ðŸ‡±", "NO": "ðŸ‡³ðŸ‡´", "NP": "ðŸ‡³ðŸ‡µ", "NR": "ðŸ‡³ðŸ‡·", "NU": "ðŸ‡³ðŸ‡º", "NZ": "ðŸ‡³ðŸ‡¿", "OM": "ðŸ‡´ðŸ‡²", "PA": "ðŸ‡µðŸ‡¦", "PE": "ðŸ‡µðŸ‡ª", "PF": "ðŸ‡µðŸ‡«", "PG": "ðŸ‡µðŸ‡¬", "PH": "ðŸ‡µðŸ‡­", "PK": "ðŸ‡µðŸ‡°", "PL": "ðŸ‡µðŸ‡±", "PM": "ðŸ‡µðŸ‡²", "PN": "ðŸ‡µðŸ‡³", "PR": "ðŸ‡µðŸ‡·", "PS": "ðŸ‡µðŸ‡¸", "PT": "ðŸ‡µðŸ‡¹", "PW": "ðŸ‡µðŸ‡¼", "PY": "ðŸ‡µðŸ‡¾", "QA": "ðŸ‡¶ðŸ‡¦", "RE": "ðŸ‡·ðŸ‡ª", "RO": "ðŸ‡·ðŸ‡´", "RS": "ðŸ‡·ðŸ‡¸", "RU": "ðŸ‡·ðŸ‡º", "RW": "ðŸ‡·ðŸ‡¼", "SA": "ðŸ‡¸ðŸ‡¦", "SB": "ðŸ‡¸ðŸ‡§", "SC": "ðŸ‡¸ðŸ‡¨", "SD": "ðŸ‡¸ðŸ‡©", "SE": "ðŸ‡¸ðŸ‡ª", "SG": "ðŸ‡¸ðŸ‡¬", "SH": "ðŸ‡¸ðŸ‡­", "SI": "ðŸ‡¸ðŸ‡®", "SJ": "ðŸ‡¸ðŸ‡¯", "SK": "ðŸ‡¸ðŸ‡°", "SL": "ðŸ‡¸ðŸ‡±", "SM": "ðŸ‡¸ðŸ‡²", "SN": "ðŸ‡¸ðŸ‡³", "SO": "ðŸ‡¸ðŸ‡´", "SR": "ðŸ‡¸ðŸ‡·", "SS": "ðŸ‡¸ðŸ‡¸", "ST": "ðŸ‡¸ðŸ‡¹", "SV": "ðŸ‡¸ðŸ‡»", "SX": "ðŸ‡¸ðŸ‡½", "SY": "ðŸ‡¸ðŸ‡¾", "SZ": "ðŸ‡¸ðŸ‡¿", "TC": "ðŸ‡¹ðŸ‡¨", "TD": "ðŸ‡¹ðŸ‡©", "TF": "ðŸ‡¹ðŸ‡«", "TG": "ðŸ‡¹ðŸ‡¬", "TH": "ðŸ‡¹ðŸ‡­", "TJ": "ðŸ‡¹ðŸ‡¯", "TK": "ðŸ‡¹ðŸ‡°", "TL": "ðŸ‡¹ðŸ‡±", "TM": "ðŸ‡¹ðŸ‡²", "TN": "ðŸ‡¹ðŸ‡³", "TO": "ðŸ‡¹ðŸ‡´", "TR": "ðŸ‡¹ðŸ‡·", "TT": "ðŸ‡¹ðŸ‡¹", "TV": "ðŸ‡¹ðŸ‡»", "TW": "ðŸ‡¹ðŸ‡¼", "TZ": "ðŸ‡¹ðŸ‡¿", "UA": "ðŸ‡ºðŸ‡¦", "UG": "ðŸ‡ºðŸ‡¬", "UM": "ðŸ‡ºðŸ‡²", "US": "ðŸ‡ºðŸ‡¸", "UY": "ðŸ‡ºðŸ‡¾", "UZ": "ðŸ‡ºðŸ‡¿", "VA": "ðŸ‡»ðŸ‡¦", "VC": "ðŸ‡»ðŸ‡¨", "VE": "ðŸ‡»ðŸ‡ª", "VG": "ðŸ‡»ðŸ‡¬", "VI": "ðŸ‡»ðŸ‡®", "VN": "ðŸ‡»ðŸ‡³", "VU": "ðŸ‡»ðŸ‡º", "WF": "ðŸ‡¼ðŸ‡«", "WS": "ðŸ‡¼ðŸ‡¸", "YE": "ðŸ‡¾ðŸ‡ª", "YT": "ðŸ‡¾ðŸ‡¹", "ZA": "ðŸ‡¿ðŸ‡¦", "ZM": "ðŸ‡¿ðŸ‡²", "ZW": "ðŸ‡¿ðŸ‡¼"
        
    ]
    
    @State var randomint: Int = 0
    @State var currcountry: String = ""
    @State var userGuess: String = ""
    @State var scorecount: Int = 0
    @State var lives = 3
    @State var highscore = 0
    @State var gotnewHigh : Bool = false
    @State var Freezetime : Bool = false
    
    @State var answered: Bool = false
    @State var answerresult: Bool = false
    
    func CheckAnswer(Guess: String){
        if cleanInput(for:Guess) == cleanInput(for:CodetoCountry(for:currcountry)){
            answerresult = true
            scorecount += 1
            if scorecount > highscore{
                highscore = scorecount
                gotnewHigh = true
            }
            if answerresult == true {
                Freezetime = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 2){
                    getRandomFlag()
                    answered = false
                    Freezetime = false
                }
                
                
            }
        }
        else{
            answerresult = false
            if lives > 0{
                lives -= 1
            }
        }
    }
    func cleanInput(for input:String) -> String{
        var cleanText : String = input
            .lowercased()
            .replacingOccurrences(of: " ", with: "")
            .replacingOccurrences(of: "&", with: "and")
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: ".", with: "")
            .folding(options:.diacriticInsensitive,locale: .current)
        print(cleanText)
        return cleanText
    }
    
    func getRandomFlag(){
        randomint = Int.random(in: 0..<flags.count)
        currcountry = Array(flags)[randomint].0
        
    }
    
    func CodetoCountry(for region:String) -> String{
        let countryName =
        Locale.current.localizedString(forRegionCode:
                                        region) ?? "Unknown"
        return countryName
    }
    
    
    var body: some View {
        NavigationStack{
            if lives > 0{
                VStack {
                    
                    Text(Array(flags)[randomint].1).font(.system(size: 200))
                    VStack{
                        TextField("Enter Flag Name...",text:
                                    $userGuess).padding()
                            .textFieldStyle(.roundedBorder).disabled(Freezetime == true)
                        Button{
                            CheckAnswer(Guess: userGuess)
                            answered = true
                            userGuess = ""
                            
                        } label: {
                            Text("Submit")
                        }
                        if answered == true {
                            
                            Text(answerresult ? "Correct" : "Incorrect").padding()
                                .font(answerresult ? .largeTitle : .system(size:70))
                                .foregroundColor(answerresult ? .green : .red)
                        }
                        
                    }
                    
                    //Text("\(currcountry)")
                    //Text(CodetoCountry(for:currcountry))
                    
                }
                
                .padding()
                .toolbar{
                    ToolbarItem(placement:
                            .navigationBarTrailing){
                                
                                Button{
                                    if lives > 0{
                                        
                                        getRandomFlag()
                                        userGuess = ""
                                        answered = false
                                        print(CodetoCountry(for: currcountry))
                                    }
                                } label: {
                                    Text("New Flag").disabled(lives == 0)
                                }
                            }
                    ToolbarItem(placement:.principal){
                        HStack{
                            VStack{
                                Text("Score")
                                Text("\(scorecount)")
                            }
                            VStack{
                                Text("Lives").foregroundColor(.red)
                                Text("\(lives)").foregroundColor(.red)
                            }
                        }
                    }
                    ToolbarItem(placement:.navigationBarLeading){
                        Button{
                            getRandomFlag()
                            userGuess = ""
                            answered = false
                            scorecount = 0
                            lives = 3
                            print(CodetoCountry(for: currcountry))
                        } label: {
                            Text("New Game")
                        }
                    }
                }
                
                .onAppear{
                    getRandomFlag()
                    print(CodetoCountry(for: currcountry))
                    
                }
            }else {
         
                ZStack{
                    Color.red
                    VStack(alignment: .center){
                        
                        HStack{
                            if(gotnewHigh){
                                Text("*NEW* High Score:").foregroundColor(.white).font(.system(size:45))
                            } else{
                                Text("High Score:").foregroundColor(.white).font(.system(size:50))
                            }
                            Text("\(highscore)").foregroundColor(.white).font(.system(size:50))
                        }
                        Text("")
                        Text("")
                        Text("")
                        Text("")
                        Text("")
                        Text("Game Over").foregroundColor(.white).font(.system(size:50))
                        HStack{
                            Text("Score:").foregroundColor(.white).font(.system(size: 50))
                            Text("\(scorecount)").foregroundColor(.white).font(.system(size:50))
                        }
                        
                    }
                }
                .toolbar{
                    ToolbarItem(placement:.navigationBarLeading){
                        Button{
                            getRandomFlag()
                            userGuess = ""
                            answered = false
                            scorecount = 0
                            lives = 3
                            gotnewHigh = false
                            print(CodetoCountry(for: currcountry))
                        } label: {
                            Text("New Game")
                        }
                    }
                }
                
            }
        }
    }
}
